# =============================================================================
# RebelDev Enhanced Auto Scanner - GitHub Actions Workflow
# Description: Automated VPN configuration validation with performance testing
# Schedule: Hourly execution for fresh configuration updates
# Version: 3.0.0
# =============================================================================

name: "üöÄ RebelDev - Enhanced Auto Config Scanner"

on:
  # Scheduled execution - every hour for fresh configurations
  schedule:
    - cron: '0 * * * *'  # Hourly at minute 0
  
  # Manual trigger for on-demand execution
  workflow_dispatch:
    inputs:
      force_refresh:
        description: 'Force refresh all configurations'
        required: false
        default: false
        type: boolean
  
  # Trigger on push to main branch for testing
  push:
    branches: [ main ]

# Environment variables for consistent execution
env:
  PYTHON_VERSION: '3.9'
  SCANNER_VERSION: '4.0.0'

jobs:
  enhanced-scan-and-deploy:
    name: "üîç Enhanced Scan & Deploy Configurations"
    runs-on: ubuntu-latest
    
    steps:
      # =======================================================================
      # SETUP PHASE - Enhanced environment preparation
      # =======================================================================
      - name: "üîÑ Checkout Repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: "üêç Setup Python Environment"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: "üì¶ Install Enhanced Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install requests aiohttp
          echo "‚úÖ Enhanced dependencies installed successfully"
          
      # =======================================================================
      # EXECUTION PHASE - Run enhanced scanner with performance testing
      # =======================================================================
      - name: "üöÄ Execute Enhanced Auto Scanner"
        run: |
          echo "Starting enhanced VPN configuration scan with performance testing..."
          python auto_scanner.py
          echo "‚úÖ Enhanced scanner execution completed"
          
      # =======================================================================
      # VALIDATION PHASE - Verify output quality
      # =======================================================================
      - name: "‚úÖ Validate Output Configurations"
        run: |
          echo "Validating generated configurations..."
          if [ -d "RebelLink" ]; then
            echo "üìÅ RebelLink directory found"
            config_count=$(find RebelLink -name "*.txt" -type f | wc -l)
            echo "üìä Found $config_count configuration files"
            
            # Check if performance report exists
            if [ -f "RebelLink/performance_report.json" ]; then
              echo "üìà Performance report generated successfully"
              # Display summary from performance report
              python -c "
              import json
              try:
                  with open('RebelLink/performance_report.json', 'r') as f:
                      report = json.load(f)
                  print(f'‚úÖ Scan completed at: {report[\"scan_timestamp\"]}')
                  print(f'üìã Total processed: {report[\"performance_metrics\"][\"total_configurations_processed\"]}')
                  print(f'‚úÖ Valid configs: {report[\"performance_metrics\"][\"valid_configurations_found\"]}')
                  print(f'üìä Success rate: {report[\"performance_metrics\"][\"success_rate\"]}%')
                  print(f'‚ö° Average latency: {report[\"performance_metrics\"][\"average_latency_ms\"]}ms')
              except Exception as e:
                  print(f'‚ùå Error reading performance report: {e}')
              "
            else
              echo "‚ùå Performance report not found"
              exit 1
            fi
          else
            echo "‚ùå RebelLink directory not found"
            exit 1
          fi
          
      # =======================================================================
      # DEPLOYMENT PHASE - Commit and push enhanced changes
      # =======================================================================
      - name: "üîÑ Deploy Enhanced Configurations"
        run: |
          # Configure git identity for commits
          git config --local user.email "action@github.com"
          git config --local user.name "RebelDev Enhanced Scanner"
          
          # Check for changes in RebelLink directory
          if git diff --quiet HEAD -- RebelLink/; then
            echo "üü° No configuration changes detected"
          else
            # Stage all changes in RebelLink directory
            git add RebelLink/
            
            # Create enhanced commit with detailed message
            timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            git commit -m "ü§ñ Enhanced Auto-Update: VPN Configurations ${timestamp}" \
                      -m "Automated configuration refresh with performance testing" \
                      -m "Scanner Version: ${{ env.SCANNER_VERSION }}" \
                      -m "Features: Base64 decoding, Ping testing, Relay delay analysis" \
                      -m "Performance metrics: Latency, Jitter, Packet loss, Quality score"
            
            # Push changes to repository
            git push
            echo "‚úÖ Enhanced configuration updates deployed successfully"
          fi
          
      # =======================================================================
      # NOTIFICATION PHASE - Enhanced status reporting
      # =======================================================================
      - name: "üìä Enhanced Scan Completion Notice"
        if: always()
        run: |
          echo "RebelDev Enhanced Auto Scanner execution completed"
          echo "View enhanced configurations in: ./RebelLink/"
          echo "Performance report: ./RebelLink/performance_report.json"
          echo "Features: Base64 decoding, Ping testing, Quality scoring"
          echo "Next scheduled run: 1 hour from now"
